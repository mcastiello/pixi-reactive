{
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier/@typescript-eslint",
    "react-app",
    "plugin:sonarjs/recommended"
  ],
  "parserOptions": {
    "project": "./tsconfig.json",
    "createDefaultProgram": true
  },
  "plugins": ["@typescript-eslint", "prettier", "spellcheck", "sonarjs"],
  "env": {
    "browser": true,
    "jasmine": true,
    "jest": true
  },
  "rules": {
    "quotes": ["error", "single"],
    "max-len": ["error", { "code": 145, "ignoreUrls": true }],
    "react/display-name": "off",
    "react/prop-types": "off",
    "require-atomic-updates": "off",
    "sonarjs/cognitive-complexity": "off",
    "no-console": ["error", { "allow": ["warn", "error"] }],
    "comma-dangle": 0,
    "no-plusplus": 0,
    "no-continue": 0,
    "arrow-parens": 0,
    "@typescript-eslint/no-use-before-define": 0,
    "implicit-arrow-linebreak": 0,
    "object-curly-newline": 0,
    "operator-linebreak": 0,
    "function-paren-newline": 0,
    "no-nested-ternary": 0,
    "spellcheck/spell-checker": [
      "error",
      {
        "comments": true,
        "strings": false,
        "identifiers": true,
        "lang": "en_GB",
        "skipWords": [
          "webpack",
          "plugins",
          "antialias",
          "pixi",
          "coords",
          "bezier",
          "utils",
          "ctrl",
          "attn",
          "impactable",
          "rect",
          "sizer",
          "args",
          "color",
          "goto",
          "center",
          "miter",
          "browni",
          "technicolor",
          "params",
          "kodachrome",
          "polaroid",
          "truthy"
        ],
        "skipIfMatch": ["http[s]?://[^s]*", "eslint.*", ".*px", ".*vh", ".*vw", "[\\s]*#.*", "ws[s]?://[^s]*"],
        "minLength": 4
      }
    ]
  },
  "overrides": [
    {
      // enable the rule specifically for TypeScript files
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/prefer-interface": "off",
        "@typescript-eslint/consistent-type-assertions": ["off"],
        "@typescript-eslint/no-unused-vars": ["error"]
      }
    }
  ],
  "settings": {
    "react": {
      "pragma": "React",
      "version": "detect"
    }
  },
  "parser": "@typescript-eslint/parser"
}
