import { Block } from 'framework7-react';
import { PixiCanvas, PixiTexture, PixiTilingSprite, AnimationContext } from 'pixi-reactive';
import React, { useCallback, useContext, useEffect, useReducer } from 'react';
import { Pages } from '../../pages';
import CodeViewer from '../CodeViewer';
import ComponentLink from '../ComponentLink';
import PropsTable, { PropsDefinition, StyledCode } from '../PropsTable';
import { StyledIntroduction, StyledSectionTitle, StyledTitle } from '../StyledComponents';

const props: PropsDefinition = [
  ['frameId', true, 'number', '0', 'ID of the latest frame generated by the browser'],
  ['elapsed', true, 'number', '0', 'Elapsed time in milliseconds since the last generated frame'],
  ['fps', true, 'number', '0', 'Current framerate of the application'],
  ['averageFps', true, 'number', '0', 'Average framerate of the application'],
  ['minFps', true, 'number', '0', 'Minimum framerate reached'],
  ['maxFps', true, 'number', '0', 'Maximum framerate reached'],
  ['history', true, 'number[]', '[]', 'History of the latest 120 fps recorded']
];

type AnimatedBackgroundProps = { src: string; speed: number; scale?: number };

const AnimatedBackground: React.FC<AnimatedBackgroundProps> = ({ src, speed, scale = 1 }) => {
  const { frameId } = useContext(AnimationContext);
  const reducer = useCallback((position) => position - speed, [speed]);
  const [position, update] = useReducer(reducer, 0);

  useEffect(update, [frameId]);

  return (
    <PixiTilingSprite tileX={position} tileScaleY={scale}>
      <PixiTexture src={src} />
    </PixiTilingSprite>
  );
};

const FrameRateStats: React.FC = () => {
  const { fps, averageFps, minFps, maxFps } = useContext(AnimationContext);

  return (
    <div>
      Current: {fps} - Average: {averageFps} - Min: {minFps} - Max: {maxFps}
    </div>
  );
};

const AnimationContextExample: React.FC = () => {
  return (
    <PixiCanvas>
      <AnimatedBackground src={'./static/assets/galaxy.png'} speed={0.1} />
      <AnimatedBackground src={'./static/assets/slow-stars.png'} speed={0.5} />
      <AnimatedBackground src={'./static/assets/fast-stars.png'} speed={2} scale={0.5} />
      <FrameRateStats />
    </PixiCanvas>
  );
};

const PixiTilingSpriteDoc: React.FC = () => {
  return (
    <>
      <StyledTitle>AnimationContext</StyledTitle>
      <StyledIntroduction>
        When you develop your animation in one single React component, you can use the <StyledCode>onUpdate</StyledCode> callback from the{' '}
        <ComponentLink page={Pages.PixiCanvas} /> to update your animation, but let's be honest, that is unlikely to happen in a real life
        scenario. You are probably going to create your own components that will need to be able to leave on their own and be reusable as
        much as possible. That is where the <StyledCode>AnimationContext</StyledCode> comes in hand. It provides you with the property{' '}
        <StyledCode>frameId</StyledCode> that gets updated every time an animation frame is provided by the browser, which means that you
        can use it to create a side effect in your component.
        <br />
        Let's refactor the example from <ComponentLink page={Pages.PixiTilingSprite} /> to make use of this, and let's have a look at the
        other performance stats provided by the context while we are there:
      </StyledIntroduction>
      <Block style={{ height: 300 }}>
        <AnimationContextExample />
      </Block>
      <Block>
        <CodeViewer src={'./static/examples/AnimationContextExample.tsx'} />
      </Block>
      <StyledSectionTitle>Properties</StyledSectionTitle>
      <PropsTable props={props} />
    </>
  );
};

export default PixiTilingSpriteDoc;
